<html>
<head>
    <title> ToDo App </title>
    <link href="https://fonts.googleapis.com/css?family=Lato:100" rel="stylesheet">
    <!-- <link href="/styles.css" rel="stylesheet"> -->
    <link rel="stylesheet" href="https://unpkg.com/purecss@0.6.2/build/pure-min.css" integrity="sha384-UQiGfs9ICog+LwheBSRCt1o5cbyKIHbwjWscjemyBMT9YCUMZffs6UqUTd0hObXD" crossorigin="anonymous">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Raleway:200">

  </head>
<body>
  <div class="container">
<h2> To Do List App</h2>
<form action ="/addTask" method="POST">
        <input type="text" name="newtask" placeholder="add new task" >
        <input type="date" name="dueDate" placeholder="dueDate" >
        <input type="time" name="dueTime" placeholder="dueTIme" >
        <label for="priority" req>Priority Level:</label>
        <select name="priority">
          <option value="medium" >Medium</option>
            <option value="high">High</option>
            <option value="low">Low</option>
        </select>
       <br><button> Add Task </button>
       <h2> Added Task </h2>
       <% for( var i = 0; i < main.length; i++){ %>
        <li><input type="checkbox" name="check" value="<%= pendPassID[i] %>" /><%=pendPassID[i] %><%= main[i] %> <br></li>
        <% } %>
        <h2> Completed task </h2>
        <% for( var i = 0; i < complete.length; i++){ %>
          <li><input type="checkbox" name="check" value="<%= compPassID[i] %>" /><%=compPassID[i] %>z<%= complete[i] %> <br></li>
          <% } %>
        <button formaction="/completeTask">Mark as Completed</button>
        <button formaction="/removetask"> Remove </button>
  </form>
</div>
<section style="">
  <div id="loader" class="loader">
  </div>
  <canvas id="weatherChart">

  </canvas>
</section>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.bundle.min.js"></script>
<script src="https://js.pusher.com/4.0/pusher.min.js"></script>
<script>
  // Using IIFE for Implementing Module Pattern to keep the Local Space for the JS Variables
(function() {
    // Enable pusher logging - don't include this in production
    Pusher.logToConsole = true;

    var serverUrl = "/",
        members = [],
        pusher = new Pusher('<your-api-key>', {
          cluster: '<your-app-cluser>',
          encrypted: true
        }),
        channel,weatherChartRef;

    function showEle(elementId){
      document.getElementById(elementId).style.display = 'flex';
    }

    function hideEle(elementId){
      document.getElementById(elementId).style.display = 'none';
    }

    function ajax(url, method, payload, successCallback){
      var xhr = new XMLHttpRequest();
      xhr.open(method, url, true);
      xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
      xhr.onreadystatechange = function () {
        if (xhr.readyState != 4 || xhr.status != 200) return;
        successCallback(xhr.responseText);
      };
      xhr.send(JSON.stringify(payload));
    }


   function renderWeatherChart(weatherData) {
      var ctx = document.getElementById("weatherChart").getContext("2d");
      var options = { };
      weatherChartRef = new Chart(ctx, {
        type: "line",
        data: weatherData,
        options: options
      });
  }

        var chartConfig = {
        labels: [],
        datasets: [
            {
                label: "Priority task",
                fill: false,
                lineTension: 0.1,
                backgroundColor: "rgba(75,192,192,0.4)",
                borderColor: "rgba(75,192,192,1)",
                borderCapStyle: 'butt',
                borderDash: [],
                borderDashOffset: 0.0,
                borderJoinStyle: 'miter',
                pointBorderColor: "rgba(75,192,192,1)",
                pointBackgroundColor: "#fff",
                pointBorderWidth: 1,
                pointHoverRadius: 5,
                pointHoverBackgroundColor: "rgba(75,192,192,1)",
                pointHoverBorderColor: "rgba(220,220,220,1)",
                pointHoverBorderWidth: 2,
                pointRadius: 1,
                pointHitRadius: 10,
                data: [],
                spanGaps: false,
            }
        ]
    };

  ajax("/getTemperature", "GET",{}, onFetchTempSuccess);

  function onFetchTempSuccess(response){
    hideEle("loader");
    var respData = JSON.parse(response);
    chartConfig.labels = respData.dataPoints.map(dataPoint => dataPoint.time);
    chartConfig.datasets[0].data = respData.dataPoints.map(dataPoint => dataPoint.temperature);
    renderWeatherChart(chartConfig)
  }

  channel = pusher.subscribe('london-temp-chart');
  channel.bind('new-temperature', function(data) {
    var newTempData = data.dataPoint;
    if(weatherChartRef.data.labels.length > 15){
      weatherChartRef.data.labels.shift();  
      weatherChartRef.data.datasets[0].data.shift();
    }
    weatherChartRef.data.labels.push(newTempData.time);
    weatherChartRef.data.datasets[0].data.push(newTempData.temperature);
    weatherChartRef.update();
  });


/* TEMP CODE FOR TESTING */
  var dummyTime = 1500;
  setInterval(function(){
    dummyTime = dummyTime + 10;
    ajax("/addTemperature?temperature="+ getRandomInt(10,20) +"&time="+dummyTime,"GET",{},() => {});
  }, 1000);

  function getRandomInt(min, max) {
      return Math.floor(Math.random() * (max - min + 1)) + min;
  }
/* TEMP CODE ENDS */

})();
</script>
</body>
</html>